// Content script ƒë·ªÉ inject v√†o trang Artlist v√† l·∫•y d·ªØ li·ªáu
// PH∆Ø∆†NG PH√ÅP: Intercept XHR + Detect playing song

console.log('Artlist Downloader - content script loaded');

// Storage cho cached data t·ª´ XHR intercept
const cachedSongsData = [];
const cachedSfxData = [];

// Storage cho current playing song
let currentPlayingSong = null;
let isDetecting = false; // Flag to prevent concurrent detection
let lastDetectionTime = 0; // Timestamp of last detection

// Detect b√†i h√°t ƒëang ph√°t
function detectCurrentSong() {
  // Debounce: kh√¥ng detect n·∫øu v·ª´a detect trong v√≤ng 1 gi√¢y
  const now = Date.now();
  if (now - lastDetectionTime < 1000) {
    console.log('‚è≠Ô∏è Skipping detection (too soon)');
    return;
  }
  
  // Prevent concurrent detection
  if (isDetecting) {
    console.log('‚è≠Ô∏è Detection already in progress');
    return;
  }
  
  isDetecting = true;
  lastDetectionTime = now;
  
  try {
    console.log('üîç Detecting current song...');
    const songInfo = extractSongInfoFromUI();
    
    if (!songInfo) {
      console.log('‚ùå No song info extracted from UI');
      return;
    }
    
    console.log('‚úÖ Song info extracted:', songInfo);
    
    let audioUrl = '';
    const audioElement = document.querySelector('audio');
    if (audioElement) {
      audioUrl = audioElement.currentSrc || audioElement.src || '';
      console.log('üéµ Audio URL:', audioUrl);
    } else {
      console.log('‚ö†Ô∏è No audio element found');
    }
    
    currentPlayingSong = {
      ...songInfo,
      sitePlayableFilePath: audioUrl,
      detectedAt: Date.now()
    };
    
    console.log('üíæ Current playing song saved:', currentPlayingSong);
  } catch (error) {
    console.error('‚ùå Error detecting current song:', error);
  } finally {
    isDetecting = false;
  }
}

// Monitor audio element ƒë·ªÉ detect b√†i h√°t ƒëang ph√°t
function monitorAudioPlayer() {
  console.log('üéß Starting audio player monitor...');
  
  let audioElement = null;
  let isMonitoring = false;
  
  const setupAudioMonitoring = (audio) => {
    if (isMonitoring) return;
    isMonitoring = true;
    
    console.log('üéµ Setting up audio monitoring...');
    
    // L·∫Øng nghe khi b√†i h√°t ƒë∆∞·ª£c play
    audio.addEventListener('play', function() {
      console.log('‚ñ∂Ô∏è Song started playing');
      setTimeout(() => detectCurrentSong(), 500); // Delay 500ms ƒë·ªÉ UI update
    });
    
    // L·∫Øng nghe khi src thay ƒë·ªïi
    audio.addEventListener('loadeddata', function() {
      console.log('üì• Audio loaded:', audio.src);
      setTimeout(() => detectCurrentSong(), 500);
    });
    
    // L·∫Øng nghe khi timeupdate (b√†i ƒëang ph√°t)
    let lastCheck = 0;
    audio.addEventListener('timeupdate', function() {
      const now = Date.now();
      if (now - lastCheck > 5000) { // Check m·ªói 5 gi√¢y
        lastCheck = now;
        detectCurrentSong();
      }
    });
    
    // Observer ƒë·ªÉ theo d√µi attribute changes
    const observer = new MutationObserver(() => {
      if (audio.src && audio.currentSrc) {
        console.log('üîÑ Audio source changed:', audio.src);
        setTimeout(() => detectCurrentSong(), 500);
      }
    });
    
    observer.observe(audio, { 
      attributes: true, 
      attributeFilter: ['src', 'currentSrc'] 
    });
  };
  
  // Continuous check for audio element
  const checkAudio = () => {
    const audio = document.querySelector('audio');
    if (audio && audio !== audioElement) {
      audioElement = audio;
      isMonitoring = false;
      console.log('üéµ Found audio element!');
      setupAudioMonitoring(audio);
      
      // Detect ngay l·∫≠p t·ª©c n·∫øu ƒëang ph√°t
      if (!audio.paused) {
        setTimeout(() => detectCurrentSong(), 1000);
      }
    }
  };
  
  // Check ngay l·∫≠p t·ª©c
  checkAudio();
  
  // Check ƒë·ªãnh k·ª≥ m·ªói 2 gi√¢y
  setInterval(checkAudio, 2000);
  
  // Detect khi trang load xong
  if (document.readyState === 'complete') {
    setTimeout(() => detectCurrentSong(), 2000);
  } else {
    window.addEventListener('load', () => {
      setTimeout(() => detectCurrentSong(), 2000);
    });
  }
}

// Extract th√¥ng tin b√†i h√°t t·ª´ UI (player ƒëang ph√°t)
function extractSongInfoFromUI() {
  try {
    let songName = '';
    let artistName = '';
    let songId = '';
    
    // METHOD 1: T√¨m t·ª´ player bar ·ªü bottom (ch√≠nh x√°c nh·∫•t)
    // Th·ª≠ nhi·ªÅu selector kh√°c nhau v√¨ Artlist th∆∞·ªùng thay ƒë·ªïi class names
    const playerBar = document.querySelector('[data-testid="MusicPlayer"]') || 
                      document.querySelector('[data-testid="AudioPlayer"]') ||
                      document.querySelector('[class*="MusicPlayer"]') ||
                      document.querySelector('[class*="AudioPlayer"]') ||
                      document.querySelector('[class*="player" i]:has(audio)') ||
                      document.querySelector('div[class*="Player" i]:has(audio)') ||
                      document.querySelector('footer:has(audio)') ||
                      document.querySelector('div[role="region"]:has(audio)');
    
    if (playerBar) {
      console.log('üéØ Found player bar element:', playerBar);
      
      // Th·ª≠ t√¨m t·∫•t c·∫£ c√°c link trong player bar
      const allLinks = playerBar.querySelectorAll('a[href*="/song/"]');
      console.log('Found links in player:', allLinks.length);
      
      const songLink = allLinks[0]; // L·∫•y link ƒë·∫ßu ti√™n
      const artistLink = playerBar.querySelector('a[href*="/artist/"]');
      
      if (songLink) {
        songName = songLink.textContent?.trim() || songLink.innerText?.trim() || '';
        const href = songLink.getAttribute('href') || '';
        const parts = href.split('/');
        songId = parts[parts.length - 1].split('?')[0];
        console.log('Found songName:', songName, 'songId:', songId);
      }
      
      if (artistLink) {
        artistName = artistLink.textContent?.trim() || artistLink.innerText?.trim() || '';
        console.log('Found artistName:', artistName);
      }
      
      if (songName) {
        console.log('‚úÖ Found song from player bar:', songName);
        return {
          songId: songId || 'unknown',
          songName: songName,
          artistId: '',
          artistName: artistName || 'Unknown Artist',
          albumId: '',
          albumName: songName
        };
      }
    } else {
      console.log('‚ùå Player bar not found, trying alternative methods...');
    }
    
    // METHOD 2: T√¨m t·ª´ audio element v√† match v·ªõi URL
    const audioElement = document.querySelector('audio');
    if (audioElement && audioElement.src) {
      console.log('üéµ Found audio element with src:', audioElement.src);
      
      // Extract song ID from audio URL if possible
      const audioUrl = audioElement.src;
      const urlMatch = audioUrl.match(/\/(\d+)\./);
      if (urlMatch) {
        const possibleSongId = urlMatch[1];
        console.log('Extracted possible song ID from audio:', possibleSongId);
        
        // Try to find corresponding link on page
        const possibleLink = document.querySelector(`a[href*="/song/${possibleSongId}"]`);
        if (possibleLink) {
          songName = possibleLink.textContent?.trim() || possibleLink.innerText?.trim() || '';
          songId = possibleSongId;
          console.log('‚úÖ Matched audio to song link:', songName);
        }
      }
    }
    
    // METHOD 3: Check if we're in album/modal view with detail opened
    const modal = document.querySelector('[role="dialog"]') || 
                  document.querySelector('[data-testid="Modal"]') ||
                  document.querySelector('[class*="Modal" i]');
    
    if (modal) {
      console.log('üéØ Found modal, extracting from modal...');
      const songLink = modal.querySelector('a[href*="/song/"]');
      const artistLink = modal.querySelector('a[href*="/artist/"]');
      
      if (songLink) {
        songName = songLink.textContent?.trim() || songLink.innerText?.trim() || '';
        const href = songLink.getAttribute('href') || '';
        const parts = href.split('/');
        songId = parts[parts.length - 1].split('?')[0];
      }
      
      if (artistLink) {
        artistName = artistLink.textContent?.trim() || artistLink.innerText?.trim() || '';
      }
      
      if (songName) {
        console.log('‚úÖ Found song from modal:', songName);
        return {
          songId: songId || 'unknown',
          songName: songName,
          artistId: '',
          artistName: artistName || 'Unknown Artist',
          albumId: '',
          albumName: songName
        };
      }
    }
    
    // METHOD 4: T√¨m row c√≥ pause button V√Ä c√≥ visual indicator (playing state)
    const audioTable = document.querySelector('table[data-testid="AudioTable"]') ||
                       document.querySelector('div[data-testid="ComposableAudioList"]') ||
                       document.querySelector('table') ||
                       document.querySelector('[role="table"]');
    
    if (audioTable) {
      console.log('üìä Found table, searching for playing row...');
      
      // T√¨m t·∫•t c·∫£ rows c√≥ pause button
      const allRows = audioTable.querySelectorAll('tr, div[role="row"], div[class*="row" i]');
      console.log('Found rows:', allRows.length);
      
      for (const row of allRows) {
        // Check xem row n√†y c√≥ pause button kh√¥ng (nhi·ªÅu c√°ch kh√°c nhau)
        const pauseBtn = row.querySelector('button[aria-label*="Pause" i]') ||
                         row.querySelector('button[title*="Pause" i]') ||
                         row.querySelector('button[aria-label*="T·∫°m d·ª´ng" i]') ||
                         row.querySelector('svg[data-icon="pause"]') ||
                         row.querySelector('svg[aria-label*="pause" i]') ||
                         row.querySelector('[class*="pause" i]');
        
        if (pauseBtn) {
          console.log('‚è∏Ô∏è Found pause button in row');
          
          // Check xem button c√≥ visible v√† not disabled
          const isVisible = pauseBtn.offsetParent !== null;
          const buttonElement = pauseBtn.closest('button') || pauseBtn;
          const isDisabled = buttonElement?.disabled || buttonElement?.getAttribute('disabled');
          
          console.log('Pause button visible:', isVisible, 'disabled:', isDisabled);
          
          if (isVisible && !isDisabled) {
            const songLink = row.querySelector('a[href*="/song/"]');
            if (songLink) {
              songName = songLink.textContent?.trim() || songLink.innerText?.trim() || '';
              const href = songLink.getAttribute('href') || '';
              const parts = href.split('/');
              songId = parts[parts.length - 1].split('?')[0];
            }
            
            const artistLink = row.querySelector('a[href*="/artist/"]');
            if (artistLink) {
              artistName = artistLink.textContent?.trim() || artistLink.innerText?.trim() || '';
            }
            
            if (songName) {
              console.log('‚úÖ Found playing song from table:', songName);
              return {
                songId: songId || 'unknown',
                songName: songName,
                artistId: '',
                artistName: artistName || 'Unknown Artist',
                albumId: '',
                albumName: songName
              };
            }
          }
        }
      }
      
      console.log('‚ùå No playing row found in table');
    } else {
      console.log('‚ùå No table found');
    }
    
    // METHOD 5: Try extracting from page title or meta tags
    if (!songName) {
      console.log('üîç Trying to extract from page metadata...');
      
      // Check document title (format: "Song Name - Artist | Artlist")
      const title = document.title;
      if (title && title.includes(' - ') && title.includes('Artlist')) {
        const parts = title.split(' - ');
        if (parts.length >= 2) {
          songName = parts[0].trim();
          artistName = parts[1].split('|')[0].trim();
          console.log('üìÑ Extracted from title:', songName, 'by', artistName);
        }
      }
      
      // Try to find song ID from current URL if on song page
      if (window.location.pathname.includes('/song/')) {
        const pathParts = window.location.pathname.split('/');
        songId = pathParts[pathParts.length - 1].split('?')[0];
        console.log('üìç Extracted song ID from URL:', songId);
      }
    }
    
    if (!songName) {
      console.log('‚ùå Could not find song info from UI');
      return null;
    }
    
    return {
      songId: songId || 'unknown',
      songName: songName,
      artistId: '',
      artistName: artistName || 'Unknown Artist',
      albumId: '',
      albumName: songName
    };
    
  } catch (error) {
    console.error('Error extracting song info:', error);
    return null;
  }
}

// Start monitoring khi script load
monitorAudioPlayer();

// Hook XMLHttpRequest ƒë·ªÉ intercept API responses t·ª´ trang Artlist
(function() {
  const oldXHROpen = window.XMLHttpRequest.prototype.open;
  const oldXHRSend = window.XMLHttpRequest.prototype.send;
  
  window.XMLHttpRequest.prototype.open = function(method, url) {
    this._url = url;
    this._method = method;
    return oldXHROpen.apply(this, arguments);
  };
  
  window.XMLHttpRequest.prototype.send = function() {
    const xhr = this;
    
    this.addEventListener('load', function() {
      if (xhr._url && xhr._url.includes('search-api.artlist.io') && xhr._url.includes('graphql')) {
        try {
          const responseData = JSON.parse(xhr.responseText);
          console.log('‚úÖ Intercepted Artlist API response:', responseData);
          
          // L∆∞u data v√†o cache
          if (responseData.data) {
            // Single song response
            if (responseData.data.song) {
              cachedSongsData.push(responseData.data.song);
              console.log('üì¶ Cached single song, total:', cachedSongsData.length);
            }
            // Multiple songs response
            if (responseData.data.songs && Array.isArray(responseData.data.songs)) {
              cachedSongsData.push(...responseData.data.songs);
              console.log('üì¶ Cached songs array, total:', cachedSongsData.length);
            }
            // SFX
            if (responseData.data.sfxs) {
              cachedSfxData.push(...responseData.data.sfxs);
            }
          }
        } catch (e) {
          console.warn('Could not parse XHR response:', e);
        }
      }
    });
    
    return oldXHRSend.apply(this, arguments);
  };
  
  console.log('üîß XHR interceptor installed successfully');
})();

// L·∫Øng nghe message t·ª´ popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'getSongInfo') {
    console.log('üéµ Content script: Getting song info for ID', request.songId);
    
    // Method 1: T√¨m trong cached data t·ª´ XHR intercept
    const cachedSong = findSongInCache(request.songId);
    if (cachedSong) {
      console.log('‚úÖ Found song in XHR cache!', cachedSong);
      const normalized = normalizeSongData(cachedSong);
      sendResponse({ success: true, data: normalized });
      return true;
    }
    
    console.log('‚ö†Ô∏è Song not in cache, trying direct API call from page context...');
    
    // Method 2: G·ªçi API tr·ª±c ti·∫øp t·ª´ page context (kh√¥ng b·ªã CORS)
    fetchSongFromPageContext(request.songId)
      .then(apiData => {
        if (apiData && apiData.sitePlayableFilePath) {
          console.log('‚úÖ Song data fetched from API (page context)', apiData);
          sendResponse({ success: true, data: apiData });
          return;
        }
        
        console.log('‚ö†Ô∏è API failed, trying to scrape from page...');
        return scrapeSongDataFromPage();
      })
      .then(scrapedData => {
        if (scrapedData && scrapedData.sitePlayableFilePath) {
          console.log('‚úÖ Song data scraped from page', scrapedData);
          sendResponse({ success: true, data: scrapedData });
        } else {
          console.error('‚ùå All methods failed');
          sendResponse({ 
            success: false, 
            error: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu. Vui l√≤ng PH√ÅT NH·∫†C ho·∫∑c REFRESH trang!' 
          });
        }
      })
      .catch(error => {
        console.error('‚ùå Error:', error);
        sendResponse({ success: false, error: error.message });
      });
    
    return true; // Gi·ªØ message channel m·ªü
  }
  
  // NEW: Get currently playing song
  if (request.action === 'getCurrentSong') {
    console.log('üéµ Getting currently playing song...');
    
    // Detect l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th√¥ng tin m·ªõi nh·∫•t
    detectCurrentSong();
    
    if (currentPlayingSong && currentPlayingSong.songName) {
      console.log('‚úÖ Returning current playing song:', currentPlayingSong);
      
      // N·∫øu c√≥ songId nh∆∞ng ch∆∞a c√≥ download link, th·ª≠ fetch t·ª´ API
      if (currentPlayingSong.songId && !currentPlayingSong.sitePlayableFilePath) {
        console.log('‚ö†Ô∏è Have songId but no download link, fetching from API...');
        
        fetchSongFromPageContext(currentPlayingSong.songId)
          .then(apiData => {
            if (apiData && apiData.sitePlayableFilePath) {
              const enriched = { ...currentPlayingSong, ...apiData };
              console.log('‚úÖ Enriched with API data:', enriched);
              sendResponse({ success: true, data: enriched });
            } else {
              // V·∫´n return data hi·ªán t·∫°i, c√≥ th·ªÉ d√πng audio URL
              console.log('‚ö†Ô∏è API failed, returning current data with audio URL');
              sendResponse({ success: true, data: currentPlayingSong });
            }
          })
          .catch(err => {
            console.error('API error:', err);
            sendResponse({ success: true, data: currentPlayingSong });
          });
        
        return true;
      }
      
      sendResponse({ success: true, data: currentPlayingSong });
    } else {
      console.log('‚ùå No song currently playing');
      sendResponse({ 
        success: false, 
        error: 'Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t. Vui l√≤ng ph√°t m·ªôt b√†i h√°t!' 
      });
    }
    
    return true;
  }
  
  // NEW: Get any song from page (fallback)
  if (request.action === 'getAnySong') {
    console.log('üîç Getting any song from page...');
    
    scrapeSongDataFromPage()
      .then(songData => {
        if (songData && songData.sitePlayableFilePath) {
          console.log('‚úÖ Found song on page:', songData);
          sendResponse({ success: true, data: songData });
        } else {
          console.log('‚ùå No song found on page');
          sendResponse({ success: false, error: 'No song found' });
        }
      })
      .catch(error => {
        console.error('‚ùå Error getting song from page:', error);
        sendResponse({ success: false, error: error.message });
      });
    
    return true;
  }
});

function findSongInCache(songId) {
  const songIdNum = parseInt(songId);
  const songIdStr = songId.toString();
  
  // T√¨m trong cached songs
  for (const song of cachedSongsData) {
    const id = song.id || song.songId;
    if (id === songIdStr || id === songIdNum || 
        parseInt(id) === songIdNum || id.toString() === songIdStr) {
      console.log('üéØ Match found:', song);
      return song;
    }
  }
  
  console.log('‚ùå No match in cache. Cached items:', cachedSongsData.length);
  return null;
}

function normalizeSongData(song) {
  // Chu·∫©n h√≥a data t·ª´ nhi·ªÅu format kh√°c nhau c·ªßa Artlist API
  const normalized = {
    songId: song.id || song.songId || '',
    songName: song.title || song.songName || 'Unknown',
    artistId: song.artist?.id || song.artistId || '',
    artistName: song.artist?.name || song.artistName || 'Unknown Artist',
    albumId: song.album?.id || song.albumId || '',
    albumName: song.album?.title || song.albumName || song.title || song.songName || 'Unknown Album',
    sitePlayableFilePath: song.waveform?.playableFileUrl || song.sitePlayableFilePath || null
  };
  
  console.log('üìã Normalized song data:', normalized);
  return normalized;
}

async function fetchSongFromPageContext(songId) {
  try {
    console.log('üåê Fetching song from API (page context)...');
    
    // G·ªçi API t·ª´ context c·ªßa trang Artlist (kh√¥ng b·ªã CORS)
    const query = `query Songs($ids: [String!]!) {
      songs(ids: $ids) {
        songId
        songName
        artistId
        artistName
        albumId
        albumName
        assetTypeId
        duration
        sitePlayableFilePath
      }
    }`;

    const variables = {
      ids: [songId.toString()]
    };

    const response = await fetch('https://search-api.artlist.io/v1/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        query: query,
        variables: variables
      })
    });

    console.log('API Response status:', response.status);

    if (!response.ok) {
      console.warn('API returned error:', response.status);
      return null;
    }

    const data = await response.json();
    console.log('API Response data:', data);

    if (data.errors) {
      console.error('GraphQL Errors:', data.errors);
      return null;
    }

    if (data.data && data.data.songs && data.data.songs[0]) {
      return data.data.songs[0];
    }

    return null;
  } catch (error) {
    console.error('Error fetching from API:', error);
    return null;
  }
}

async function scrapeSongDataFromPage() {
  try {
    console.log('üîç Attempting to scrape song data from page...');
    
    let songId = '';
    let title = '';
    let artistName = 'Unknown';
    let artistId = '';
    
    // Check if we're on an album page with a modal/detail view open
    const isAlbumPage = window.location.pathname.includes('/album/');
    
    if (isAlbumPage) {
      console.log('üìÄ Detected album page, looking for active/selected song...');
      
      // Method 1: T√¨m modal ho·∫∑c detail view ƒëang m·ªü
      const modal = document.querySelector('[role="dialog"]') || 
                    document.querySelector('[data-testid="Modal"]') ||
                    document.querySelector('.modal') ||
                    document.querySelector('[class*="Modal"]');
      
      if (modal) {
        console.log('üéØ Found modal/detail view');
        
        // T√¨m song link trong modal
        const songLink = modal.querySelector('a[href*="/song/"]');
        if (songLink) {
          const href = songLink.getAttribute('href');
          const parts = href.split('/');
          songId = parts[parts.length - 1];
          title = songLink.textContent?.trim() || '';
          console.log('‚úÖ Extracted from modal:', { songId, title });
        }
        
        // T√¨m artist trong modal
        const artistLink = modal.querySelector('a[href*="/artist/"]');
        if (artistLink) {
          artistName = artistLink.textContent?.trim() || 'Unknown';
          const href = artistLink.getAttribute('href');
          const parts = href.split('/');
          artistId = parts[parts.length - 1];
        }
      }
      
      // Method 2: T√¨m row c√≥ class active/selected/playing
      if (!songId) {
        console.log('üîç Looking for active row in table...');
        const rows = document.querySelectorAll('tr, div[role="row"], [class*="row"]');
        
        for (const row of rows) {
          // Check for active/selected/playing indicators
          const hasActiveClass = row.className.includes('active') || 
                                 row.className.includes('selected') ||
                                 row.className.includes('playing') ||
                                 row.className.includes('current');
          
          const hasActiveAttribute = row.getAttribute('aria-selected') === 'true' ||
                                    row.getAttribute('data-active') === 'true' ||
                                    row.getAttribute('data-selected') === 'true';
          
          if (hasActiveClass || hasActiveAttribute) {
            const songLink = row.querySelector('a[href*="/song/"]');
            if (songLink) {
              const href = songLink.getAttribute('href');
              const parts = href.split('/');
              songId = parts[parts.length - 1];
              title = songLink.textContent?.trim() || '';
              
              const artistLink = row.querySelector('a[href*="/artist/"]');
              if (artistLink) {
                artistName = artistLink.textContent?.trim() || 'Unknown';
                const href = artistLink.getAttribute('href');
                const parts = href.split('/');
                artistId = parts[parts.length - 1];
              }
              
              console.log('‚úÖ Found active row:', { songId, title });
              break;
            }
          }
        }
      }
    } else {
      // Not an album page, use URL-based detection
      const urlParts = window.location.pathname.split('/');
      songId = urlParts[urlParts.length - 1];
      
      // T√¨m title
      const titleElement = document.querySelector('h1[data-testid="Heading"]');
      if (titleElement) {
        title = titleElement.textContent.trim();
      }
      
      // T√¨m artist
      const artistLinks = document.querySelectorAll('a[data-testid="Link"]');
      for (const link of artistLinks) {
        const href = link.getAttribute('href');
        if (href && href.includes('/artist/')) {
          artistName = link.textContent.trim();
          const parts = href.split('/');
          artistId = parts[parts.length - 1];
          break;
        }
      }
    }
    
    if (!songId || !title) {
      console.warn('‚ö†Ô∏è Could not find song ID or title');
      return null;
    }
    
    // T√¨m audio URL - Method 1: Audio element
    let audioUrl = null;
    const audioElements = document.querySelectorAll('audio');
    if (audioElements.length > 0 && audioElements[0].src) {
      audioUrl = audioElements[0].src;
      console.log('‚úÖ Found audio URL in <audio> tag');
    }
    
    // Method 2: __NEXT_DATA__
    if (!audioUrl && window.__NEXT_DATA__) {
      try {
        const pageData = JSON.stringify(window.__NEXT_DATA__);
        const match = pageData.match(/"(?:playableFileUrl|sitePlayableFilePath)"\s*:\s*"([^"]+)"/);
        if (match) {
          audioUrl = match[1];
          console.log('‚úÖ Found audio URL in __NEXT_DATA__');
        }
      } catch (e) {
        console.warn('Could not extract from __NEXT_DATA__', e);
      }
    }
    
    // Method 3: Performance API (last recently loaded .aac file)
    if (!audioUrl && window.performance) {
      const resources = performance.getEntriesByType('resource');
      const audioResources = resources.filter(r => 
        r.name.includes('.aac') || 
        r.name.includes('.m4a') || 
        r.name.includes('cms-public-artifacts')
      );
      
      if (audioResources.length > 0) {
        // Get the most recent one
        audioUrl = audioResources[audioResources.length - 1].name;
        console.log('‚úÖ Found audio URL in performance resources');
      }
    }
    
    if (!audioUrl) {
      console.warn('‚ö†Ô∏è Could not find audio URL. Did you play the song?');
      return null;
    }
    
    const result = {
      songId: songId,
      songName: title,
      artistId: artistId,
      artistName: artistName,
      albumId: '',
      albumName: title,
      sitePlayableFilePath: audioUrl
    };
    
    console.log('üìã Scraped data:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå Scraping error:', error);
    return null;
  }
}

console.log('‚úÖ Content script fully initialized');
